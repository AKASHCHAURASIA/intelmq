# -*- coding: utf-8 -*-

import os
import unittest
from collections import OrderedDict

import intelmq.lib.test as test
from intelmq.bots.parsers.iotmalware.parser import IotMalwareParserBot
from intelmq.lib import utils

with open(os.path.join(os.path.dirname(__file__), 'data.json')) as handle:
    EXAMPLE_FILE = handle.read()
   


EXAMPLE_REPORT = {"feed.url": "https://futex.re/tracker/TinyTracker.json",
                  "feed.name": "IotMalware feed",
                  "__type": "Report",
                  "raw": utils.base64_encode(EXAMPLE_FILE),
                  "time.observation": "2015-11-02T13:11:43+00:00"
                  }

EXAMPLE_EVENT = [{"time.observation": "2015-11-02T13:11:44+00:00",
                   "classification.type": "malware",
                   "classification.taxonomy": "malacious code",
                   "feed.url": "https://futex.re/tracker/TinyTracker.json",
                   "time.source": "2017-03-06T23:30:56+00:00",
                   "source.url": "http://187.23.237.199:63336/.i",
                   "malware.hash.md5": "2e9dd2e43e866a26c44ceccc129e0c52",
                   "feed.name": "IotMalware feed",               "raw":"eyJpZCI6IDEsICJkYXRlIjogIjIwMTctMDMtMDYgMjM6MzA6NTYiLCAidXJsIjogImh0dHA6Ly8xODcuMjMuMjM3LjE5OTo2MzMzNi8uaSIsICJoYXNoIjogIjJlOWRkMmU0M2U4NjZhMjZjNDRjZWNjYzEyOWUwYzUyIiwgImNvdW50cnkiOiAiQnJhemlsIiwgInByb3ZpZGVyIjogIkFTMjg1NzMgQ0xBUk8gUy5BLiJ9",
		   "__type": "Event"
                  },
                  {"time.observation": "2015-11-02T13:11:44+00:00",
                   "classification.type": "malware",
                   "classification.taxonomy": "malacious code",
                   "feed.url": "https://futex.re/tracker/TinyTracker.json",
                   "time.source": "2017-03-06T23:40:18+00:00",
                   "source.url": "http://175.181.34.65:16267/.i",
                   "feed.name": "IotMalware feed",               "raw":"eyJpZCI6IDIsICJkYXRlIjogIjIwMTctMDMtMDYgMjM6NDA6MTgiLCAidXJsIjogImh0dHA6Ly8xNzUuMTgxLjM0LjY1OjE2MjY3Ly5pIiwgImhhc2giOiAiIiwgImNvdW50cnkiOiAiVGFpd2FuIiwgInByb3ZpZGVyIjogIkFTNDc4MCBEaWdpdGFsIFVuaXRlZCBJbmMuIn0=",
		   "__type": "Event"
                  }]


class TestIotMalwareParserBot(test.BotTestCase, unittest.TestCase):
    """
    A TestCase for IotMalwareParserBot.
    """

    @classmethod
    def set_bot(cls):
        cls.bot_reference = IotMalwareParserBot
        cls.default_input_message = EXAMPLE_REPORT

    def test_event(self):
        """ Test if correct Event has been produced. """
        self.run_bot()
        
        self.assertMessageEqual(0, EXAMPLE_EVENT[0])
        self.assertMessageEqual(1, EXAMPLE_EVENT[1])

if __name__ == '__main__':  # pragma: no cover
    unittest.main()
